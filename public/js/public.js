// Generated by CoffeeScript 1.10.0
(function() {
  var dark, dirtPaper, ease, graphHeight, graphOffset, light, locs, logoPaper, logs, pile, startGraphing, svgNames, svgs, transitionEnd;

  logoPaper = new paper.PaperScope;

  dirtPaper = new paper.PaperScope;

  graphOffset = 100;

  light = '#f3fff3';

  dark = '#73db71';

  graphHeight = 600;

  ease = 400;

  logs = null;

  pile = null;

  startGraphing = 0;

  locs = {};

  svgs = {
    scraps: {},
    compost: {}
  };

  svgNames = {
    scraps: ['apple', 'banana', 'beet', 'egg1', 'egg2', 'peanut', 'tomato', 'carrot', 'dirt0', 'dirt1', 'dirt2', 'dirt3', 'dirt5', 'dirt5'],
    compost: [1, 2, 3, 4, 5, 6]
  };

  transitionEnd = 'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd';

  $(function() {
    var $logList, $main, Location, browsePile, createDirt, createLocation, createLogo, dirtSvgs, isEnd, isStart, scatterDirt, setSliderWidth, setUpSlider, setup, swapPileDate, swapPileType, whichLoc, winW;
    $main = $('main');
    $logList = $('.info .logList');
    Location = (function() {
      function Location(loc) {
        this.id = loc._id;
        this.name = loc.name;
        this.slug = loc.slug;
        this.dropoff = loc.dropoff;
        this.what = loc.what;
        this.who = loc.who;
        this.how = loc.how;
        this.compostable = loc.compostable;
        this.email = loc.email;
        this.elem = null;
        this.graph = null;
        this.easel = null;
        this.canvases = {};
        this.papers = {};
        this.groups = {};
      }

      Location.prototype.getData = function(date) {
        var id, loc, slug, url;
        loc = this;
        id = loc.id;
        slug = loc.slug;
        if (date) {
          url = '/api/logs/' + id + '/' + date;
        } else {
          url = '/api/logs/' + id + '/';
        }
        $.ajax({
          url: url,
          dataType: 'json',
          error: function(jqXHR, status, error) {
            return console.log(jqXHR, status, error);
          },
          success: function(response) {
            if (!response) {
              return;
            } else if (response.date) {
              logs = response.logs;
              date = response.date;
              $('select.date').val(date);
            } else {
              logs = response;
            }
            loc.stretchCanvas('scraps');
            loc.stretchCanvas('compost');
            $(loc.elem).addClass('show');
          }
        });
      };

      Location.prototype.stretchCanvas = function(type) {
        var height, width;
        this.papers[type] = new paper.PaperScope;
        this[type] = document.createElement('canvas');
        width = w();
        height = graphHeight;
        this[type].height = height;
        $(this[type]).css({
          height: height
        });
        $(this[type]).attr('resize', false).attr('id', type);
        $(this[type]).appendTo($(this.easel));
        this.papers[type].setup(this.canvases[type]);
        return this.graphPoints(logs, type);
      };

      Location.prototype.createLogList = function() {
        var compost, compostHtml, date, dateHtml, html, i, id, results, row, scraps, scrapsHtml;
        i = 0;
        results = [];
        while (i < logs.length) {
          row = logs[i];
          id = row._id;
          date = moment(row.date).format('MMMM Do, YYYY');
          scraps = row.scraps;
          compost = row.compost;
          dateHtml = '<div class="cell date">' + date + '</div>';
          scrapsHtml = '<div class="cell scraps">' + scraps + ' lbs.</div>';
          compostHtml = '<div class="cell compost">' + compost + ' lbs.</div>';
          html = '<li data-id="' + id + '">' + dateHtml + scrapsHtml + compostHtml + '</li>';
          results.push($logList.prepend(html));
        }
        return results;
      };

      Location.prototype.graphPoints = function(logs, type) {
        var firstDayUnix, groupName, groupNames, i, lastX, line, loc, newGroup, thisGroup, width, xFactor;
        loc = this;
        if (logs.length === 0) {
          return;
        }
        loc.groups[type] = new loc.papers[type].Group;
        groupNames = ['graph', 'graphContent', 'clippedGraphContent', 'markers', 'markerHovers', 'fillSymbols', 'fillContent', 'axes', 'graphUtils'];
        i = 0;
        while (i < groupNames.length) {
          groupName = groupNames[i];
          newGroup = new loc.papers[type].Group({
            name: groupName
          });
          thisGroup = loc.groups[type];
          thisGroup[groupName] = newGroup;
          loc.groups[type].addChildren(thisGroup[groupName]);
          i++;
        }
        xFactor = 250;
        line = new loc.papers[type].Path({
          name: 'line',
          strokeWidth: 4,
          strokeCap: 'round',
          strokeJoin: 'round',
          strokeColor: dark,
          opacity: 1
        });
        width = $('canvas#' + type).innerWidth();
        lastX = void 0;
        firstDayUnix = moment(logs[0].date).unix();
        line.add(-ease, graphHeight + 5);
        return $(logs).each(function(i, log) {
          var data, date, humanDate, id, marker, markerHover, popup, popupModel, since, thisDayUnix, value, x, y, yFactor;
          if (log[type] >= 0) {
            date = moment(log.date);
            humanDate = date.format('MMMM Do, YYYY');
            thisDayUnix = moment(date).unix();
            id = log._id;
            since = (thisDayUnix - firstDayUnix) / 250000;
            x = since * xFactor;
            lastX = x;
            yFactor = 5;
            value = log[type];
            y = graphHeight - (parseInt(value) * yFactor) - 15;
            data = {
              date: humanDate,
              id: id,
              index: i,
              valueType: type,
              value: log[type],
              x: x,
              y: y
            };
            line.add(x, y);
            marker = new loc.papers[type].Shape.Circle({
              name: id,
              x: x,
              y: y,
              radius: 8,
              strokeWidth: 3,
              strokeColor: dark,
              fillColor: light,
              data: data,
              opacity: 1
            });
            markerHover = marker.clone().set({
              radius: 15,
              strokeWidth: 0,
              opacity: 0
            });
            loc.groups[type].markers.addChild(marker);
            loc.groups[type].markerHovers.addChild(markerHover);
            popupModel = $('.popup.model');
            popup = $(popupModel).clone();
            $(popup).removeClass('model');
            $(popup).attr('data-id', id);
            $(popup).css({
              top: '1000px'
            });
            $(popup).children('.date').children('.data').html(humanDate);
            $(popup).children('.value').children('.title').html(type);
            $(popup).children('.value').children('.data').html(log[type] + ' lbs.');
            $(popup).attr('data-type', type).addClass(type);
            $(popup).insertAfter($(popupModel));
            markerHover.onMouseEnter = function(event) {
              id = event.target.data.id;
              loc.showPopUp(id);
              return $('.graph').css({
                'cursor': 'pointer'
              });
            };
            markerHover.onMouseLeave = function(event) {
              id = event.target.data.id;
              loc.hidePopUp(id);
              return $('.graph').css({
                'cursor': 'default'
              });
            };
            markerHover.onClick = function(event) {
              id = event.target.data.id;
              return loc.scrollToListItem(id);
            };
          }
          if (i === logs.length - 1) {
            line.add(lastX + ease, graphHeight + 5);
            line.sendToBack();
            line.simplify();
            return loc.loadFillSymbols(line, type);
          }
        });
      };

      Location.prototype.loadFillSymbols = function(line, type) {
        var loc;
        loc = this;
        $.each(svgNames[type], function(i, svgName) {
          var imgUrl;
          imgUrl = '../images/' + type + '/' + svgName + '.svg';
          $.get(imgUrl, null, (function(svg) {}), 'xml').done(function(svg) {
            var importedSvg, symbol;
            importedSvg = loc.papers[type].project.importSVG(svg);
            symbol = new loc.papers[type].Symbol(importedSvg);
            symbol.data = {
              'name': svgName
            };
            svgs[type][svgName] = symbol;
            if (i === svgNames[type].length - 1) {
              loc.fillGraphWithSymbols(line, type);
            }
          });
        });
      };

      Location.prototype.fillGraphWithSymbols = function(line, type) {
        var canvasWidth, coords, endPile, fill, fillMask, fillSymbol, i, ii, lastMarker, lastMarkerIndex, lastMarkerX, lastPointX, lastSeg, limit, limits, lineLength, loc, markers, mask, newPileX, newSymbol, pileWidth, pileX, point, randInt, shift, size, svgName, thisGroup;
        loc = this;
        mask = new loc.papers[type].Path.Rectangle({
          name: 'mask',
          x: 0,
          y: 0,
          width: w(),
          height: h(),
          clipMask: false
        });
        endPile = void 0;
        lineLength = line.segments.length;
        lastSeg = line.segments[lineLength - 1];
        lastPointX = lastSeg.point.x;
        fill = line.clone().set({
          name: 'fill',
          fillColor: '#754e34',
          strokeCap: '',
          strokeJoin: '',
          strokeColor: '',
          strokeWidth: '',
          closed: true,
          opacity: 1
        });
        fill.add(lastPointX + 200, graphHeight);
        fillMask = fill.clone().set({
          name: 'fillMask',
          clipMask: true
        });
        limits = [];
        i = 0;
        while (i < fillMask.length) {
          point = fillMask.getLocationAt(i).point;
          coords = {
            x: point.x,
            y: point.y
          };
          limits.push(coords);
          i += 50;
        }
        i = 0;
        while (i < limits.length) {
          limit = limits[i];
          size = 25;
          ii = 0;
          while (ii < graphHeight - limit.y) {
            shift = random(20, -20);
            randInt = random(0, svgNames[type].length - 1);
            svgName = svgNames[type][randInt];
            fillSymbol = svgs[type][svgName];
            if (fillSymbol !== void 0) {
              newSymbol = fillSymbol.place({
                x: limit.x + shift,
                y: graphHeight - ii + shift
              });
              newSymbol.scale(0.25);
              newSymbol.rotate(random(0, 360));
              newSymbol.sendToBack();
              loc.groups[type].fillSymbols.addChild(newSymbol);
            }
            ii += 20;
          }
          i++;
        }
        loc.groups[type].fillContent.addChildren([fill, fillMask, loc.groups[type].fillSymbols]);
        loc.groups[type].clippedGraphContent.addChildren([loc.groups[type].fillContent, line, loc.groups[type].markers, loc.groups[type].markerHovers]);
        loc.groups[type].graphContent.addChildren([mask, loc.groups[type].clippedGraphContent]);
        loc.groups[type].graph.addChild(loc.groups[type].graphContent);
        pile = loc.groups[type].graphContent;
        pileWidth = pile.bounds.width;
        pileX = pile.position.x;
        canvasWidth = $('.graph canvas').innerWidth();
        thisGroup = loc.groups[type];
        markers = thisGroup.markers;
        lastMarkerIndex = markers.children.length - 1;
        lastMarker = markers.children[lastMarkerIndex];
        lastMarkerX = lastMarker.position.x;
        newPileX = pileX - lastMarkerX + canvasWidth - (ease / 4);
        pile.position.x = newPileX;
        loc.papers[type].view.draw();
        return loc.showGraph(type);
      };

      Location.prototype.showGraph = function(type) {
        $(this.graph).addClass('show').removeClass('loading');
        $(this.elem).addClass('loaded');
        if ($(this.elem).hasClass('opened')) {
          this.showGraphUtils(this.id);
        }
        if (type === 'compost') {
          return $(this[type]).addClass('show');
        }
      };

      Location.prototype.showPopUp = function(id) {
        var easelWidth, loc, marker, markers, pileOffset, pileWidth, pileX, popup, type, x, y;
        loc = this;
        type = loc.getType();
        if (!loc.groups[type] || !loc.groups[type].markers) {
          return;
        }
        markers = loc.groups[type].markers.children;
        marker = markers[id];
        if (marker === void 0) {
          return;
        }
        pile = loc.groups[type].graphContent;
        pileOffset = pile.bounds.x;
        pileWidth = pile.bounds.width;
        pileX = pile.position.x;
        easelWidth = $(this.easel).innerWidth();
        popup = $('.popup[data-id=' + id + '].' + type);
        x = marker.position.x - popup.outerWidth() / 2;
        y = marker.position.y - $(popup).outerHeight() - 30;
        $('.popup.show').removeClass('show');
        $(popup).css({
          display: 'block',
          left: x,
          top: y
        }).addClass('show');
        return $('.logList li[data-id="' + id + '"]').addClass('hover');
      };

      Location.prototype.hidePopUp = function(id) {
        var loc, marker, markers, popup, type;
        loc = this;
        type = $('canvas.show').attr('id');
        if (!loc.groups[type] || !loc.groups[type].markers) {
          return;
        }
        markers = loc.groups[type].markers.children;
        marker = markers[id];
        if (marker === void 0) {
          return;
        }
        popup = $('.popup[data-id=' + id + ']');
        $(popup).one(transitionEnd, function(e) {
          return $(popup).css({
            top: '1000px'
          });
        });
        $(popup).removeClass('show');
        return $('.logList li[data-id="' + id + '"]').removeClass('hover');
      };

      Location.prototype.scrollToListItem = function(id) {
        var lastListItem, loc, logList, logListHeight, logListItem, scrollTo;
        loc = this;
        logList = $('.logList');
        logListItem = $('.logList li[data-id="' + id + '"]');
        logListHeight = $(logList).height();
        scrollTo = $(logListItem).index() * $(logListItem).outerHeight();
        lastListItem = $(logList).children('li:last-child');
        $(lastListItem).css({
          marginBottom: scrollTo
        });
        $(logList).animate({
          scrollTop: scrollTo
        }, 200, function() {
          $(logList).on('scroll', function(event) {
            var distance, scrollTop;
            lastListItem = $(this).children('li:last-child');
            distance = $(lastListItem).index() * $(lastListItem).outerHeight() + $(lastListItem).outerHeight() + 30 - $(this).outerHeight();
            scrollTop = $(this).scrollTop();
            if (scrollTop <= distance) {
              $(lastListItem).css({
                'marginBottom': '5px'
              });
            }
          });
        });
      };

      Location.prototype.slideToMarker = function(id) {
        var canvasWidth, date, group, loc, marker, markerIndex, markerX, markers, newPileX, pileWidth, pileX, type;
        loc = this;
        type = $('canvas.show').attr('id');
        pile = loc.groups[type].graphContent;
        pileWidth = pile.bounds.width;
        pileX = pile.position.x;
        canvasWidth = $('.graph canvas').innerWidth();
        group = loc.groups[type];
        markers = group.markers.children;
        markerIndex = markers[id];
        if (markerIndex) {
          marker = markers[id];
          markerX = marker.position.x;
          newPileX = pileX - markerX + canvasWidth / 2;
          $('.graph').addClass('loading');
          return setTimeout((function() {
            pile.position.x = newPileX;
            loc.papers[type].view.draw();
            $('.popup.show').removeClass('show');
            loc.showPopUp(id, loc);
            return $('.graph').removeClass('loading');
          }), 200);
        } else {
          date = $('.logList li[data-id="' + id + '"]').data('date');
          return $('select.date').val(date).change();
        }
      };

      Location.prototype.showGraphUtils = function(type) {
        var loc, markers, thisGroup;
        loc = this;
        thisGroup = loc.groups[type];
        markers = thisGroup.markers;
        while (i < markers.children.length) {
          markers.children[i].opacity = 0;
          i++;
        }
        loc.papers[type].view.draw();
      };

      Location.prototype.hideGraphUtils = function(type) {
        var i, loc, markerCount, markers, thisGroup;
        loc = this;
        thisGroup = loc.groups[type];
        markers = thisGroup.markers;
        markerCount = markers.children.length;
        i = 0;
        while (i < markers.children.length) {
          markers.children[i].opacity = 0;
          i++;
        }
        return loc.papers[type].view.draw();
      };

      Location.prototype.getType = function() {
        return $(this.easel).find('canvas.show').attr('id');
      };

      return Location;

    })();
    setup = function() {
      var slug, url;
      if (slug = $('.location').attr('data-slug')) {
        url = 'api/location?slug=' + slug;
      } else {
        url = 'api/location';
      }
      return $.ajax({
        url: url,
        dataType: 'json',
        error: function(jqXHR, status, error) {
          return console.log(jqXHR, status, error);
        },
        success: function(response) {
          return $.each(response, function(i, loc) {
            return createLocation(loc);
          });
        }
      });
    };
    createLocation = function(loc) {
      var $loc;
      if ($('.location.sample').length) {
        $loc = $('.location.sample').clone().removeClass('sample').attr('id', loc._id).attr('data-id', loc._id).attr('data-slug', loc.slug).appendTo('.locations');
      } else {
        $loc = $('.location');
      }
      loc = new Location(loc);
      loc.elem = $loc;
      loc.graph = $loc.find('.graph');
      loc.easel = $loc.find('.easel');
      locs[loc.slug] = loc;
      return loc.getData();
    };
    whichLoc = function(elem) {
      var id, slug;
      id = $(elem).attr('data-id');
      slug = $(elem).parents('.location').attr('data-slug');
      return locs[slug];
    };
    browsePile = function(e) {
      var $loc, graph, loc, newPosition, slug, type, width;
      $loc = $(this).parents('.location');
      slug = $loc.attr('data-slug');
      loc = locs[slug];
      type = loc.getType();
      if ($('.popup.show').length >= 1) {
        return;
      }
      graph = $(this).parent('.graph')[0];
      width = graph.clientWidth;
      pile = loc.groups[type]['graphContent'];
      if ($(this).hasClass('left') && !isStart(pile)) {
        newPosition = pile.position.x + width;
      } else if ($(this).hasClass('right') && !isEnd(pile)) {
        newPosition = pile.position.x - width;
      } else {
        return;
      }
      $(graph).addClass('loading');
      setTimeout((function() {
        pile.position.x = newPosition;
        loc.papers[type].view.draw();
        return $(graph).removeClass('loading');
      }), 200);
    };
    swapPileType = function(e) {
      var type;
      type = $(this).attr('data-type');
      $('.button.selected').removeClass('selected');
      $(this).addClass('selected');
      $('canvas.show').one(transitionEnd, function() {
        $('canvas#' + type).addClass('show');
        $('canvas.show').off(transitionEnd);
      });
      $('canvas.show').removeClass('show');
      return $('.popup').removeClass('show');
    };
    swapPileDate = function(date) {
      var $loc, loc, slug, type;
      $loc = $(this).parents('.location');
      slug = $loc.attr('data-slug');
      loc = locs[slug];
      type = loc.getType();
      if (!date || typeof date !== 'string') {
        date = this.value;
      }
      $(loc.graph).addClass('loading');
      $(loc.canvases[type]).one(transitionEnd, function() {
        loc.papers['scraps'].remove();
        loc.papers['compost'].remove();
        return getData(date);
      });
      return $(loc.canvases[type]).removeClass('show');
    };
    isStart = function(pile) {
      if (pile.bounds.x + 200 > 0) {
        return true;
      } else {
        return false;
      }
    };
    isEnd = function(pile) {
      if (pile.bounds.width + pile.bounds.x < w()) {
        return true;
      } else {
        return false;
      }
    };
    createLogo = function() {
      var headerHeight, headerWidth, hovering, loc, logoCanvas, logoUrl;
      loc = this;
      logoCanvas = document.createElement('canvas');
      headerWidth = 530;
      headerHeight = 300;
      $(logoCanvas).attr('id', 'logo').attr('resize', true).css({
        width: headerWidth,
        height: headerHeight
      });
      logoCanvas.width = headerWidth;
      logoCanvas.height = headerHeight;
      $('header#logo a#logoLink').append(logoCanvas);
      $('header#logo a#logoLink').click(function(event) {
        return;
        event.preventDefault();
        if ($('.location.opened')) {
          closeSection();
        }
      });
      logoPaper.setup(logoCanvas);
      hovering = false;
      logoUrl = '../images/logo.svg';
      $.get(logoUrl, null, (function(data) {
        var i, logo, logoGroup, logoGroups, logoObj, logoObjs, logoSvg;
        logoSvg = (new XMLSerializer).serializeToString(data.documentElement);
        logo = logoPaper.project.importSVG(logoSvg);
        logo.position.x = headerWidth / 2;
        logo.position.y = headerHeight / 2;
        logoObjs = logo.children;
        logoGroups = new logoPaper.Group;
        i = 0;
        while (i < logoObjs.length) {
          logoObj = logoObjs[i];
          logoObj.center = 'center';
          logoGroup = new logoPaper.Group;
          logoGroup.addChildren(logoObj);
          logoGroups.addChildren(logoGroup);
          i++;
        }
        logoPaper.view.draw();
      }), 'xml').done(function() {
        var jiggle;
        jiggle = function(event) {
          var i, wiggleAmount;
          if (hovering) {
            i = 0;
            while (i < logoObjs.length) {
              wiggleAmount = Math.random() * 2 + 6;
              logoObjs[i].rotation = Math.sin((event.count + i) / 3) * wiggleAmount;
              i++;
            }
          }
        };
        $('header#logo').addClass('show');
        $('section.locations').addClass('show');
        createDirt();
      });
    };
    setUpSlider = function() {
      var arrow, left_arrow, right_arrow, showingImage, slideWrapper, slider, sliderWidth, slides, slidesLength;
      slider = $('.slider');
      sliderWidth = $(slider).innerWidth();
      slideWrapper = $(slider).find('.slides');
      slides = $(slideWrapper).find('.slide');
      slidesLength = $(slides).length;
      arrow = $(slider).find('.arrow');
      left_arrow = $(arrow).filter('.left');
      right_arrow = $(arrow).filter('.right');
      showingImage = $(slides)[0];
      $(showingImage).addClass('show');
      setSliderWidth();
      $('section#slider').addClass('show');
      $(arrow).click(function() {
        var margin, newLeft, nextIndex, nextSlide, shift, showIndex, showingCaption, showingSlide;
        sliderWidth = $(slider).innerWidth();
        showingSlide = $('.slide.show');
        showingCaption = $('.caption.show');
        showIndex = $(showingSlide).index();
        shift = $(slideWrapper).css('left');
        margin = void 0;
        if ($(this).is('.left')) {
          nextIndex = showIndex - 1;
          margin = 0;
          if (nextIndex === -1) {
            nextIndex = slidesLength - 1;
          }
        } else if ($(this).is('.right')) {
          nextIndex = showIndex + 1;
          margin = 0;
          if (nextIndex === slidesLength) {
            nextIndex = 0;
            margin = 0;
          }
        }
        nextSlide = $(slides).eq(nextIndex);
        $(showingSlide).removeClass('show');
        $(nextSlide).addClass('show');
        newLeft = -sliderWidth * nextIndex + margin;
        $(slideWrapper).removeClass('static').css({
          'left': newLeft
        });
      });
    };
    setSliderWidth = function() {
      var newSliderWidth, showIndex, showingSlide, slideWrapper, slider, sliderWidth, slides, slidesLength;
      slider = $('.slider');
      sliderWidth = $(slider).innerWidth();
      slideWrapper = $(slider).find('.slides');
      slides = $(slideWrapper).find('.slide');
      slidesLength = $(slides).length;
      newSliderWidth = (sliderWidth + 50) * slidesLength;
      $(slideWrapper).css({
        width: newSliderWidth
      });
      $(slides).each(function() {
        $(this).css({
          width: sliderWidth
        });
      });
      $(slideWrapper).addClass('static');
      showingSlide = $('.slide.show');
      showIndex = $(showingSlide).index();
      $(slideWrapper).css({
        'left': -sliderWidth * showIndex
      }, 600);
    };
    createDirt = function() {
      var dirtCanvas, footerHeight, footerWidth, i, imgUrl;
      dirtCanvas = document.createElement('canvas');
      footerWidth = w();
      footerHeight = 300;
      $(dirtCanvas).attr('id', 'dirt').attr('resize', true).css({
        width: footerWidth,
        height: footerHeight
      });
      dirtCanvas.width = footerWidth;
      dirtCanvas.height = footerHeight;
      $('footer .dirt').append(dirtCanvas);
      dirtPaper.setup(dirtCanvas);
      i = 0;
      while (i < 6) {
        imgUrl = '../images/compost/' + i + '.svg';
        $.ajax({
          type: 'GET',
          async: false,
          url: imgUrl,
          success: function(svg) {
            var importedSvg, symbol;
            importedSvg = dirtPaper.project.importSVG(svg);
            symbol = new dirtPaper.Symbol(importedSvg);
            symbol.data = {
              'name': i
            };
            dirtSvgs[i] = symbol;
            scatterDirt();
          }
        });
        i++;
      }
    };
    scatterDirt = function() {
      var dirtSvg, index, newDirt, shiftX, shiftY, x, y;
      y = 0;
      while (y < 310) {
        x = 0;
        while (x < winW()) {
          index = Math.floor(Math.random() * 5 + 0);
          dirtSvg = dirtSvgs[index];
          shiftX = random(-90, 90);
          shiftY = random(-90, 90);
          if (dirtSvg !== void 0) {
            newDirt = dirtSvg.place({
              x: x + shiftX,
              y: y + shiftY
            });
            newDirt.rotate(random(0, 360));
            newDirt.scale(0.25);
            newDirt.sendToBack();
          }
          x += 80;
        }
        y += 80;
      }
      dirtPaper.view.draw();
    };
    winW = function() {
      return window.innerWidth;
    };
    createLogo();
    setSliderWidth();
    setUpSlider();
    setup();
    $('body').on('click', '.loaded .graph .arrow', browsePile);
    $('body').on('click', '.loaded .button.type:not(.selected)', swapPileType);
    $('body').on('change', '.loaded select.date', swapPileDate);
    $logList.on('mouseenter', 'li', function(event) {
      var id, loc;
      id = $(this).attr('data-id');
      loc = whichLoc(this);
      return loc.showPopUp(id);
    });
    $logList.on('mouseleave', 'li', function(event) {
      var id, loc;
      id = $(this).attr('data-id');
      loc = whichLoc(this);
      return loc.hidePopUp(id);
    });
    $logList.on('click', 'li', function(event) {
      var id, loc;
      id = $(this).attr('data-id');
      loc = whichLoc(this);
      return loc.slideToMarker(id);
    });
    $(window).resize(function() {
      return setSliderWidth();
    });
    return dirtSvgs = [];
  });

}).call(this);
